{"title":"算法糖","uid":"f6d4d1b0450da9517d363a942d602c58","slug":"candy-algo","date":"2021-08-05T14:16:47.000Z","updated":"2021-08-05T15:00:09.192Z","comments":true,"path":"api/articles/candy-algo.json","keywords":"水母秀,水母,代码,编程,博客,算法","cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个世界上总有一些有趣的算法。它们意义不大，但总能让你大开眼界。它们就像糖果一样，很甜但没有营养。</p>\n<p>下面我将对这些算法一一介绍。</p>\n<h2 id=\"四倍速度平方根\"><a href=\"#四倍速度平方根\" class=\"headerlink\" title=\"四倍速度平方根\"></a>四倍速度平方根</h2><p>求平方根有 二分 和 牛顿迭代 两种方法。一般牛顿迭代速度更快，所以更常用。</p>\n<p>牛顿迭代可以计算一段单调函数的零点。大致过程为从初始点计算函数切线，再计算该切线与 x 轴交点，然后计算该 x 值下的 y 值。不断重复这一过程可以不断接近这个函数的零点。</p>\n<p>合适的初始点估算可以在达到相同精度的情况下减少迭代的次数。下面这个函数使用了一种玄学方法估算初始点，使得结果精度略低但速度达到了 sqrt 的 4 倍。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">float</span> <span class=\"token function\">fsqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">float</span> xhalf <span class=\"token operator\">=</span> <span class=\"token number\">0.5f</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到浮点数的每一个二进制位</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0x5f375a86</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 估算起始的 y 值</span>\n    x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将新数以相同二进制位方式转换回 float</span>\n    x <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5f</span><span class=\"token operator\">-</span>xhalf<span class=\"token operator\">*</span>x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 牛顿迭代，多次重复精确度增加</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"超级随机数\"><a href=\"#超级随机数\" class=\"headerlink\" title=\"超级随机数\"></a>超级随机数</h2><p>C 语言有内置随机函数 rand()，C++ 有更优秀的 mt19937，但是此处介绍一种随机数算法，速度和随机性都好于前二者。</p>\n<p>最传统的随机数算法称作 LCG，为种子乘质数加质数模质数，三个质数互不相同。本算法称作 PCG，由 M.E. O’Neill 发明，为 LCG 稍加干扰。本算法是为数不多能通过 <a href=\"http://www.bitbabbler.org/test-data/TestU01-BigCrush.html\">BigCrush</a> 测试的算法，此测试 mt19937 无法通过。</p>\n<p>此算法速度略快于 rand()，远快于 mt19937。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">rand32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>seed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token comment\">// seed 为种子，id 为随机数流</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">uint32_t</span> ov <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>seed<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>seed <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>seed <span class=\"token operator\">*</span> <span class=\"token number\">747796405u</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// LCG</span>\n    ov <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ov <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ov <span class=\"token operator\">>></span> <span class=\"token number\">28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> ov<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">277803737u</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 干扰</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ov <span class=\"token operator\">>></span> <span class=\"token number\">22u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> ov<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 再次干扰</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"前言这个世界上总有一些有趣的算法。它们意义不大，但总能让你大开眼界。它们就像糖果一样，很甜但没有营养。 下面我将对这些算法一一介绍。 四倍速度平方根求平方根有 二分 和 牛顿迭代 两种方法。一般牛顿迭代速度更快，所以更常用。 牛顿迭代可以计算一段单调函数的零点。大致过程为从初始点...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法 消遣","slug":"算法-消遣","count":1,"path":"api/tags/算法-消遣.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E5%80%8D%E9%80%9F%E5%BA%A6%E5%B9%B3%E6%96%B9%E6%A0%B9\"><span class=\"toc-text\">四倍速度平方根</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B6%85%E7%BA%A7%E9%9A%8F%E6%9C%BA%E6%95%B0\"><span class=\"toc-text\">超级随机数</span></a></li></ol>","author":{"name":"水母秀","slug":"blog-author","avatar":"https://portrait.gitee.com/uploads/avatars/user/1732/5198638_CodingJellyfish_1578982229.png","link":"/","description":"一只漂泊无依的水母的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{}}