[{"id":"f6d4d1b0450da9517d363a942d602c58","title":"算法糖","content":"前言这个世界上总有一些有趣的算法。它们意义不大，但总能让你大开眼界。它们就像糖果一样，很甜但没有营养。\n下面我将对这些算法一一介绍。\n四倍速度平方根求平方根有 二分 和 牛顿迭代 两种方法。一般牛顿迭代速度更快，所以更常用。\n牛顿迭代可以计算一段单调函数的零点。大致过程为从初始点计算函数切线，再计算该切线与 x 轴交点，然后计算该 x 值下的 y 值。不断重复这一过程可以不断接近这个函数的零点。\n合适的初始点估算可以在达到相同精度的情况下减少迭代的次数。下面这个函数使用了一种玄学方法估算初始点，使得结果精度略低但速度达到了 sqrt 的 4 倍。\nfloat fsqrt(float x)\n&#123;\n    float xhalf = 0.5f*x;\n    int i = *(int*)&amp;x; // 得到浮点数的每一个二进制位\n    i = 0x5f375a86- (i>>1); // 估算起始的 y 值\n    x = *(float*)&amp;i; // 将新数以相同二进制位方式转换回 float\n    x = x*(1.5f-xhalf*x*x); // 牛顿迭代，多次重复精确度增加\n    return 1.0 / x;\n&#125; \n超级随机数C 语言有内置随机函数 rand()，C++ 有更优秀的 mt19937，但是此处介绍一种随机数算法，速度和随机性都好于前二者。\n最传统的随机数算法称作 LCG，为种子乘质数加质数模质数，三个质数互不相同。本算法称作 PCG，由 M.E. O’Neill 发明，为 LCG 稍加干扰。本算法是为数不多能通过 BigCrush 测试的算法，此测试 mt19937 无法通过。\n此算法速度略快于 rand()，远快于 mt19937。\nuint32_t rand32(uint32_t *seed, int id) // seed 为种子，id 为随机数流\n&#123;\n    uint32_t ov = *seed;\n    *seed = *seed * 747796405u + id; // LCG\n    ov = ((ov >> ((ov >> 28u) + 4u)) ^ ov) * 277803737u;  // 干扰\n    return (ov >> 22u) ^ ov; // 再次干扰\n&#125;\n","slug":"candy-algo","date":"2021-08-05T14:16:47.000Z","categories_index":"","tags_index":"算法 消遣","author_index":"水母秀"},{"id":"72c7ddce26aa441f582c2a263f846533","title":"水母秀","content":"欢迎来到水母秀的 hexo 博客! 这是水母哥的第一篇博客，使用 Hexo 创建，阅读 Documentation 以深入了解，并托管于 Gitee pages 上。如果使用 Hexo 是出现了问题，你可以在 Troubleshooting 中找到答案，或在 GitHub 上询问开发它的大神。\n快速开始创建新文章$ hexo new \"My New Post\"\n\n更多信息：Writing\n运行服务器$ hexo server\n\n更多信息：Server\n创建静态文件$ hexo generate\n\n更多信息：Generating\n调动到远程网站$ hexo deploy\n\n更多信息：Deployment\n","slug":"hello-world","date":"2021-08-03T13:13:05.071Z","categories_index":"","tags_index":"测试","author_index":"水母秀"}]